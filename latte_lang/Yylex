// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.3).

// Lexer definition for use with JLex
package latte_lang;

import java_cup.runtime.*;
%%
%cup
%unicode
%line

%char
%public
%{
  String pstring = new String();
  final int unknown = -1;
  ComplexSymbolFactory.Location left = new ComplexSymbolFactory.Location(unknown, unknown);
  ComplexSymbolFactory cf = new ComplexSymbolFactory();
  public SymbolFactory getSymbolFactory() { return cf; }
  int yycolumn = unknown - 1;
  public int line_num() { return (yyline+1); }
  public ComplexSymbolFactory.Location left_loc() {
    return new ComplexSymbolFactory.Location(yyline+1, yycolumn+1, yychar);
  }
  public ComplexSymbolFactory.Location right_loc() {
    ComplexSymbolFactory.Location left = left_loc();
  return new ComplexSymbolFactory.Location(left.getLine(), left.getColumn()+yylength(), left.getOffset()+yylength());
  }
  public String buff() {return new String(yy_buffer,yy_buffer_index,10).trim();}
%}
%eofval{
  return cf.newSymbol("EOF", sym.EOF, left_loc(), left_loc());
%eofval}
LETTER = ({CAPITAL}|{SMALL})
CAPITAL = [A-Z\xC0-\xD6\xD8-\xDE]
SMALL = [a-z\xDF-\xF6\xF8-\xFF]
DIGIT = [0-9]
IDENT = ({LETTER}|{DIGIT}|['_])
%state COMMENT
%state CHAR
%state CHARESC
%state CHAREND
%state STRING
%state ESCAPED
%%
<YYINITIAL>\( { return cf.newSymbol("", sym._SYMB_0, left_loc(), right_loc()); }
<YYINITIAL>\) { return cf.newSymbol("", sym._SYMB_1, left_loc(), right_loc()); }
<YYINITIAL>, { return cf.newSymbol("", sym._SYMB_2, left_loc(), right_loc()); }
<YYINITIAL>\{ { return cf.newSymbol("", sym._SYMB_3, left_loc(), right_loc()); }
<YYINITIAL>\} { return cf.newSymbol("", sym._SYMB_4, left_loc(), right_loc()); }
<YYINITIAL>; { return cf.newSymbol("", sym._SYMB_5, left_loc(), right_loc()); }
<YYINITIAL>= { return cf.newSymbol("", sym._SYMB_6, left_loc(), right_loc()); }
<YYINITIAL>\+\+ { return cf.newSymbol("", sym._SYMB_7, left_loc(), right_loc()); }
<YYINITIAL>-- { return cf.newSymbol("", sym._SYMB_8, left_loc(), right_loc()); }
<YYINITIAL>- { return cf.newSymbol("", sym._SYMB_9, left_loc(), right_loc()); }
<YYINITIAL>! { return cf.newSymbol("", sym._SYMB_10, left_loc(), right_loc()); }
<YYINITIAL>&& { return cf.newSymbol("", sym._SYMB_11, left_loc(), right_loc()); }
<YYINITIAL>\|\| { return cf.newSymbol("", sym._SYMB_12, left_loc(), right_loc()); }
<YYINITIAL>\+ { return cf.newSymbol("", sym._SYMB_13, left_loc(), right_loc()); }
<YYINITIAL>\* { return cf.newSymbol("", sym._SYMB_14, left_loc(), right_loc()); }
<YYINITIAL>/ { return cf.newSymbol("", sym._SYMB_15, left_loc(), right_loc()); }
<YYINITIAL>% { return cf.newSymbol("", sym._SYMB_16, left_loc(), right_loc()); }
<YYINITIAL>< { return cf.newSymbol("", sym._SYMB_17, left_loc(), right_loc()); }
<YYINITIAL><= { return cf.newSymbol("", sym._SYMB_18, left_loc(), right_loc()); }
<YYINITIAL>> { return cf.newSymbol("", sym._SYMB_19, left_loc(), right_loc()); }
<YYINITIAL>>= { return cf.newSymbol("", sym._SYMB_20, left_loc(), right_loc()); }
<YYINITIAL>== { return cf.newSymbol("", sym._SYMB_21, left_loc(), right_loc()); }
<YYINITIAL>!= { return cf.newSymbol("", sym._SYMB_22, left_loc(), right_loc()); }
<YYINITIAL>boolean { return cf.newSymbol("", sym._SYMB_23, left_loc(), right_loc()); }
<YYINITIAL>else { return cf.newSymbol("", sym._SYMB_24, left_loc(), right_loc()); }
<YYINITIAL>false { return cf.newSymbol("", sym._SYMB_25, left_loc(), right_loc()); }
<YYINITIAL>if { return cf.newSymbol("", sym._SYMB_26, left_loc(), right_loc()); }
<YYINITIAL>int { return cf.newSymbol("", sym._SYMB_27, left_loc(), right_loc()); }
<YYINITIAL>return { return cf.newSymbol("", sym._SYMB_28, left_loc(), right_loc()); }
<YYINITIAL>string { return cf.newSymbol("", sym._SYMB_29, left_loc(), right_loc()); }
<YYINITIAL>true { return cf.newSymbol("", sym._SYMB_30, left_loc(), right_loc()); }
<YYINITIAL>void { return cf.newSymbol("", sym._SYMB_31, left_loc(), right_loc()); }
<YYINITIAL>while { return cf.newSymbol("", sym._SYMB_32, left_loc(), right_loc()); }
<YYINITIAL>"#"[^\n]* { /* skip */ }
<YYINITIAL>"//"[^\n]* { /* skip */ }
<YYINITIAL>"/*" { yybegin(COMMENT); }
<COMMENT>"*/" { yybegin(YYINITIAL); }
<COMMENT>. { /* skip */ }
<COMMENT>[\n] { /* skip */ }

<YYINITIAL>"\"" { left = left_loc(); yybegin(STRING); }
<STRING>\\ { yybegin(ESCAPED); }
<STRING>\" { String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return cf.newSymbol("", sym._STRING_, left, right_loc(), foo.intern()); }
<STRING>.  { pstring += yytext(); }
<STRING>\r\n|\r|\n { throw new Error("Unterminated string on line " + left.getLine() ); }

<ESCAPED>n { pstring +=  "\n"; yybegin(STRING); }
<ESCAPED>t  { pstring += "\t"; yybegin(STRING); }
<ESCAPED>r  { pstring += "\r"; yybegin(STRING); }
<ESCAPED>f  { pstring += "\f"; yybegin(STRING); }
<ESCAPED>\" { pstring += "\""; yybegin(STRING); }
<ESCAPED>\\ { pstring += "\\"; yybegin(STRING); }
<ESCAPED>.  { pstring += yytext(); yybegin(STRING); }
<ESCAPED>\r\n|\r|\n { throw new Error("Unterminated string on line " + left.getLine() ); }



<YYINITIAL>{DIGIT}+ { return cf.newSymbol("", sym._INTEGER_, left_loc(), right_loc(), new Integer(yytext())); }
<YYINITIAL>{LETTER}{IDENT}* { return cf.newSymbol("", sym._IDENT_, left_loc(), right_loc(), yytext().intern()); }
<YYINITIAL>[ \t\r\n\f] { /* ignore white space. */ }

. { throw new Error("Illegal Character <"+yytext()+"> at "+(yyline+1)); }
