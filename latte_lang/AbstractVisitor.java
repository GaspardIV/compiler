// File generated by the BNF Converter (bnfc 2.9.3).

package latte_lang;

/** Abstract Visitor */

public class AbstractVisitor<R,A> implements AllVisitor<R,A> {
    /* Program */
    public R visit(latte_lang.Absyn.Prog p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Program p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* TopDef */
    public R visit(latte_lang.Absyn.FnDef p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ClDef p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ClDefExt p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.TopDef p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Arg */
    public R visit(latte_lang.Absyn.Ar p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Arg p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* ClBlock */
    public R visit(latte_lang.Absyn.ClBlk p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.ClBlock p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* ClMember */
    public R visit(latte_lang.Absyn.ClField p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ClMethod p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.ClMember p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Block */
    public R visit(latte_lang.Absyn.Blk p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Block p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Stmt */
    public R visit(latte_lang.Absyn.Empty p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.BStmt p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Decl p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Ass p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.AssArray p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.AssField p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Incr p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Decr p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Ret p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.VRet p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Cond p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.CondElse p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.While p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.For p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.SExp p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Stmt p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Item */
    public R visit(latte_lang.Absyn.NoInit p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Init p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Item p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Type */
    public R visit(latte_lang.Absyn.Int p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Str p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Bool p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Void p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Class p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Array p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Fun p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Type p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Expr */
    public R visit(latte_lang.Absyn.ENewArray p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EArrayElem p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ENew p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EMethod p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EField p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EVar p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ELitInt p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ELitTrue p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ELitFalse p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EApp p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EString p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Neg p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Not p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EMul p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EAdd p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.ERel p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EAnd p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EOr p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.Expr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* AddOp */
    public R visit(latte_lang.Absyn.Plus p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Minus p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.AddOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* MulOp */
    public R visit(latte_lang.Absyn.Times p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Div p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.Mod p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.MulOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* RelOp */
    public R visit(latte_lang.Absyn.LTH p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.LE p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.GTH p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.GE p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.EQU p, A arg) { return visitDefault(p, arg); }
    public R visit(latte_lang.Absyn.NE p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(latte_lang.Absyn.RelOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }

}
