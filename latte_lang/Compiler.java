// File generated by the BNF Converter (bnfc 2.9.3).

package latte_lang;

import java.io.*;

import frontend.SemanticError;
import frontend.SematicAnalyst;
import latte_lang.Absyn.Program;


public class Compiler {
    Yylex l;
    parser p;

    public Compiler(String[] args) {
        try {
            Reader input;
            if (args.length == 0) input = new InputStreamReader(System.in);
            else input = new FileReader(args[0]);
            l = new Yylex(input);
        } catch (IOException e) {
            System.err.println("Error: File not found: " + args[0]);
            System.exit(1);
        }
        p = new parser(l, l.getSymbolFactory());
    }

    public latte_lang.Absyn.Program parse() throws Exception {
        /* The default parser is the first-defined entry point. */
        latte_lang.Absyn.Program ast = p.pProgram();
        System.out.println();
        System.out.println("Parse Succesful!");
        System.out.println();
        System.out.println("[Abstract Syntax]");
        System.out.println();
        System.out.println(PrettyPrinter.show(ast));
        System.out.println();
        System.out.println("[Linearized Tree]");
        System.out.println();
        System.out.println(PrettyPrinter.print(ast));
        return ast;
    }

    public static void main(String args[]) throws Exception {
        Compiler t = new Compiler(args);
        try {
            Program ast = t.parse();
            SematicAnalyst analyst = new SematicAnalyst();
            analyst.checkTypes(ast);
//            analyst.checkReturn(ast);

        } catch (SemanticError e) {
            System.err.println("At line " + e.getLineNum() + " :");
            System.err.println("     " + e.getMessage());
            System.exit(1);
        } catch (Throwable e) {
            System.err.println("At line " + String.valueOf(t.l.line_num()) + ", near \"" + t.l.buff() + "\" :");
            System.err.println("     " + e.getMessage());
            System.exit(1);
        }
    }
}
